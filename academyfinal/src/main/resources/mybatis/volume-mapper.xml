<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="volume">

	<!-- 시퀀스 조회 -->
	<select id="sequence" resultType="long">
		SELECT volume_seq.NEXTVAL FROM
		dual
	</select>

	<!-- 용량 등록 -->
	<insert id="add" parameterType="VolumeDto">
		INSERT INTO volume (
		volume_no,
		product_no,
		volume_ml,
		volume_stock,
		volume_price,
		discounted_volume_price,
		volume_status <!-- ✅ 상태값 추가 -->
		) VALUES (
		#{volumeNo},
		#{productNo},
		#{volumeMl},
		#{volumeStock},
		#{volumePrice},
		#{discountedVolumePrice},
		#{volumeStatus} <!-- ✅ 매핑 -->
		)
	</insert>

	<!-- 특정 상품의 용량 전체 삭제 -->
	<delete id="deleteByProductNo" parameterType="long">
		DELETE FROM volume
		WHERE product_no = #{productNo}
	</delete>

	<!-- 사용자용: 상품별 활성화된(active) 용량 목록 조회 -->
	<select id="selectVolumes" parameterType="long"
		resultType="VolumeDto">
		SELECT
		volume_no AS volumeNo,
		product_no AS productNo,
		volume_ml AS
		volumeMl,
		volume_stock AS volumeStock,
		volume_price AS volumePrice,
		discounted_volume_price AS discountedVolumePrice,
		volume_status AS
		volumeStatus <!-- ✅ 상태 매핑 -->
		FROM volume
		WHERE product_no = #{productNo}
		AND volume_status = 'active' <!-- 
			✅ 상태 조건 -->
	</select>

	<!-- 전체 상태 포함: 상품별 모든 용량 조회 (관리자용) -->
	<select id="selectByProductNo" resultType="VolumeDto">
		SELECT
		volume_no AS
		volumeNo,
		product_no AS productNo,
		volume_ml AS volumeMl,
		volume_stock AS
		volumeStock,
		volume_price AS volumePrice,
		discounted_volume_price AS
		discountedVolumePrice,
		volume_status AS volumeStatus
		FROM volume
		WHERE
		product_no = #{productNo}
	</select>

	<!-- 용량 수정 -->
	<update id="updateVolume" parameterType="VolumeDto">
		UPDATE volume
		SET
		volume_stock = #{volumeStock},
		volume_price = #{volumePrice},
		discounted_volume_price = #{discountedVolumePrice}
		WHERE
		product_no =
		#{productNo}
		AND volume_ml = #{volumeMl}
	</update>

	<!-- 상태값만 변경 (관리자 전용) -->
	<update id="updateVolumeStatus" parameterType="map">
		UPDATE volume
		SET
		volume_status = #{status}
		WHERE volume_no = #{volumeNo}
	</update>

	<!-- ✅ Soft Delete 처리 -->
	<update id="markDeletedByProductNo" parameterType="long">
		UPDATE volume
		SET volume_status = 'deleted'
		WHERE product_no = #{productNo}
	</update>

	<!-- ✅ 기존 용량 조회 (수정 시 upsert용) -->
	<select id="findByProductNoAndMl" parameterType="map"
		resultType="VolumeDto">
		SELECT
		volume_no AS volumeNo,
		product_no AS productNo,
		volume_ml AS volumeMl,
		volume_stock AS volumeStock,
		volume_price AS volumePrice,
		discounted_volume_price AS discountedVolumePrice,
		volume_status AS volumeStatus
		FROM volume
		WHERE product_no = #{productNo}
		AND volume_ml = #{volumeMl}
	</select>
	
	<!-- volumeNo를 통해서 조회 -->
	<select id="selectByVolumeNo" resultType="VolumeDto">
		select * from volume
		where volume_no = #{volumeNo}
	</select>
	
	<!-- volume v 에서 volume_no가 일치하는 레코드를 찾아서 해당 레코드의 product_no를 기준으로
		product p 테이블에서 left join 후 product_name과 product_price를 같이 갖고옴 -->
	<select id="selectWithProductByVolumeNo" resultType="VolumeDto">
		select
			v.*,
			p.product_name as productName,
			p.product_price as productPrice
		from volume v
		left join products p on v.product_no = p.product_no
		where v.volume_no = #{volumeNo}
	</select>

</mapper>
